trigger:
  - main

variables:
- group: 'Build Variables'
- name: buildConfiguration
  value: 'Release'

stages:
  - stage: Build and deploy 
    jobs:
    - job: Build
      pool:
        name: Default
        demands:
        - agent.os -equals Windows_NT
      workspace:        
        clean: all

      steps:
        - checkout: self
          fetchDepth: 1

        #- task: DownloadSecureFile@1
        #  name: PrivateKey file
        #  displayName: 'Download PrivateKey file'
        #  inputs:
        #    secureFile: 'PrivateKey.txt'

        #- task: DeleteFiles@1
        #  inputs:
        #    contents: |
        #      **/Source/DatabaseMirroringProject/PrivateKey.txt

        #- task: CopyFiles@2
        #  inputs:
        #    contents: 'PrivateKey.txt'
        #    targetFolder: $(Build.ArtifactStagingDirectory)

        - task: MSBuild@1
          displayName: Build Mirroring App
          inputs:
            solution: '**/*.sln'
            configuration: $(BuildConfiguration)
            msbuildArguments: '-p:DeployOnBuild=true -p:WebPublishMethod=Package -p:PackageAsSingleFile=true -p:PackageLocation="$(Build.StagingDirectory)" -t:build -restore'

        - task: DotNetCoreCLI@2
          inputs:
            command: "publish"
            publishWebProjects: false
            projects: |
              **/DatabaseMirroringProject.ArmTemplate.csproj
            arguments: "--configuration $(BuildConfiguration) --output $(Build.StagingDirectory) -p:Version=$(SoAssemblyFileVersion)"
            zipAfterPublish: true

        - publish: $(Build.StagingDirectory)
            artifact: Apps

    #- deployment: DeployArmAndApps
    #  workspace:
    #    clean: all
    #  dependsOn: Build
    #  condition: succeeded()
    #  pool:
    #    name: Default
    #    demands:
    #    - agent.os -equals Windows_NT
    #  strategy:
    #    runOnce:
    #      deploy:
    #        steps:
    #        - checkout: self
    #        - download: none

    #        - task: DownloadPipelineArtifact@2
    #          inputs:
    #            artifact: 'Apps'
    #            path: '$(Pipeline.Workspace)/Apps'

    #        - task: AzurePowerShell@5
    #          displayName: 'Run Deployment Script'
    #          inputs:
    #            azureSubscription: 'AS QA-Development'
    #            ScriptPath: '$(Build.SourcesDirectory)/Source/DatabaseMirroringProject.ArmTemplate/Deploy-Mirroring.ps1'
    #            azurePowerShellVersion: latestVersion
    #            pwsh: true

    #        - task: AzureWebApp@1
    #          inputs:
    #            azureSubscription: 'AS QA-Development'
    #            appName: $(WebAppName)
    #            package: '$(Pipeline.Workspace)/Apps/DatabaseMirroringProject.zip'



  