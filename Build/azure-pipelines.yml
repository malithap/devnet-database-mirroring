trigger:
  - main

variables:
- group: 'Build Variables'
- name: buildConfiguration
  value: 'Release'
- name: solution 
  value: '**/*.sln'

stages:
  - stage: Build_and_deploy 
    jobs:
    - job: Build
      pool:
        vmImage: 'windows-latest'
      workspace:        
        clean: all

      steps:
        - checkout: self
          fetchDepth: 1

        - task: NuGetToolInstaller@1

        - task: NuGetCommand@2
          inputs:
            restoreSolution: $(solution)

        - task: DownloadSecureFile@1
          name: 'Download_PrivateKey_file'
          inputs:
            secureFile: 'PrivateKey.txt'

        - task: CopyFiles@2
          inputs:
            sourceFolder: $(Agent.TempDirectory)
            contents: PrivateKey.txt
            OverWrite: true
            targetFolder: "$(Build.SourcesDirectory)/Source/DatabaseMirroringProject"

        - task: MSBuild@1
          displayName: Build Mirroring App
          inputs:
            solution: '**/DatabaseMirroringProject.csproj'
            configuration: $(BuildConfiguration)
            msbuildArguments: '-p:DeployOnBuild=true -p:WebPublishMethod=Package -p:PackageAsSingleFile=true -p:PackageLocation="$(Build.StagingDirectory)"'

        - task: DotNetCoreCLI@2
          inputs:
            command: "publish"
            publishWebProjects: false
            projects: |
              **/DatabaseMirroringProject.ArmTemplate.csproj
            arguments: "--configuration $(BuildConfiguration) --output $(Build.StagingDirectory)"
            zipAfterPublish: true

        - publish: $(Build.StagingDirectory)
          artifact: Apps

    - deployment: Deploy
      dependsOn: build
      condition: succeeded()
      pool:
        vmImage: 'windows-latest'
      workspace:
        clean: all
      variables:
      - group: 'Mirroring Test App'
      environment: mirroring-sod
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - download: none

            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: 'Apps'
                path: '$(Pipeline.Workspace)/Apps'

            - task: AzurePowerShell@5
              displayName: 'Run deployment script'
              inputs:
                azureSubscription: 'AS QA-Development'
                scriptPath: '$(Build.SourcesDirectory)/Source/DatabaseMirroringProject.ArmTemplate/Deploy-Mirroring.ps1'
                azurePowerShellVersion: latestVersion
                pwsh: true

            - task: AzureRmWebAppDeployment@4
              inputs:
                appType: 'webApp'
                azureSubscription: 'AS QA-Development'
                WebAppName: $(WebAppName)
                enableXmlVariableSubstitution: true
                package: '$(Pipeline.Workspace)/Apps/DatabaseMirroringProject.zip'



  